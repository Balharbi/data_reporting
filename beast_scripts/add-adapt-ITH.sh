#!/bin/sh

# This Script was written by Damian Yap (Apr 2013)
# To filter and add specific adaptors to primer3 generated primers for MiSeq
# Generate the order file and filtered AmpliconManifest
# Modified Aug 2015 for multiple primers for the same positions

###############################################################
fname="BRCA"	# Sample set naming
name="SA535-"$fname
expt="1"
type="Ill" 		# Illumina adaptors
#type="Fld" 		# Fluidigm adaptors
Project="Tumour_Xenograft"	# Project name
RefGen="C:\Illumina\MiSeq Reporter\Genomes\Homo_sapiens\UCSC\hg19\Sequence\WholeGenomeFASTA"	# Reference Genome for AmpliconManifest
ver="2"			# AmpliconManifest Version
###############################################################

base="/home/dyap/Projects/PrimerDesign"
dir=$base"/"$Project
p3dir=$dir"/primer3"
posdir=$dir"/positions"

##########################################
# Selected positions should be placed here
# Generated de novo from file
sourcefile=$posdir"/"$name"_selected_positions.txt"
ffile=$name"_primer_order.txt"
# List the unique seq_id
# remove header with tail -n +2 and uniq (as multiple primer sets expected!)
cat $p3dir"/"$ffile | awk -F"," '{print $12}'| tail -n +2 | uniq > $sourcefile

#########################################
# Primer name format
setname=$name
#########################################

cd $dir

primerfile=$p3dir"/"$ffile
orderleft=$p3dir"/"$setname"-"$type"-leftprimers.csv"
orderright=$p3dir"/"$setname"-"$type"-rightprimers.csv"

						echo "WellPosition,Name,Sequence,Notes" > $orderleft
						echo "WellPosition,Name,Sequence,Notes" > $orderright

#oldmanifest=$p3dir"/"$name".AmpliconManifest"
#newmanifest=$p3dir"/"$name"-filtered.AmpliconManifest"

rm -fr $orderfile
#rm -fr $newmanifest


	if [[ $type == "Ill" ]]
		then
		# Illlumina Adaptors (5'->3')
		fa="TCGTCGGCAGCGTCAGATGTGTATAAGAGACAG"
		ra="GTCTCGTGGGCTCGGAGATGTGTATAAGAGACAG"
	fi

	if [[ $type == "Fld" ]]
		then	
		# Forward adaptor for Fluidigm
		fa="ACACTGACGACATGGTTCTACA"
		# Reverse adaptor for Fluidigm (5'->3')
		ra="TACGGTAGCAGAGACTTGGTCT"
	fi

# If file has a header (manual input)
# cat $sourcefile | tail -n +2  > pattern
# If file has a NO header (selected using grep)
cat $sourcefile > pattern
# IF file is generated by a script (header and formatted)
# cat $sourcefile | tail -n +2 | awk -F" " '{print $1}' > pattern

# Counters
alpha="A"
count=1
plate=1
		for i in `cat pattern`

		do
        	first=0
        	last=`grep $i $primerfile | wc -l`

	        for j in  $(eval echo "{$first..$last}")
# Check the positions of these in the input file ALWAYS!!!!
			do
			label=`grep -m$j $i $primerfile | tail -n1 | awk -F"," '{print $1}'`
			left0=`grep -m$j $i $primerfile | tail -n1 | awk -F"," '{print $6}'`
			right0=`grep -m$j $i $primerfile | tail -n1 | awk -F"," '{print $8}'`


			echo $label,$left0,$right0

				if [[ $alpha == "I" ]]; 
					then 	alpha="A"
						plate=$((plate+1))
						orderleft=$p3dir"/"$setname"-L"$plate".csv"
						orderright=$p3dir"/"$setname"-R"$plate".csv"

						echo "WellPosition,Name,Sequence,Notes" > $orderleft
						echo "WellPosition,Name,Sequence,Notes" > $orderright

				fi

			if [[ $left0 != "" ]];
			
				then

				if [[ $right0 != "" ]];
			
					then

						if [[ $count -lt 10 ]];
							then 
								welpos=$alpha"0"$count
							else
								welpos=$alpha$count
						fi

						echo "Adding adaptors to sequences..."
						echo $welpos","$label"_L,"$fa$left0 >> $orderleft
						echo $welpos","$label"_R,"$ra$right0 >> $orderright

#						echo "Filtering AmpliconManifest"
#						grep ^$i -m1 $oldmanifest | awk -F"\t" '{print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6}' | sed 's/chr//' >> $newmanifest.tmp

				fi
			fi

			count=$((count+1))

			if [[ $count == 13 ]];
				then 
				count="1"


				if [[ $alpha == "H" ]]; then alpha="I"; fi
				if [[ $alpha == "G" ]]; then alpha="H"; fi
				if [[ $alpha == "F" ]]; then alpha="G"; fi
				if [[ $alpha == "E" ]]; then alpha="F"; fi
				if [[ $alpha == "D" ]]; then alpha="E"; fi
				if [[ $alpha == "C" ]]; then alpha="D"; fi
				if [[ $alpha == "B" ]]; then alpha="C"; fi
				if [[ $alpha == "A" ]]; then alpha="B"; fi
				if [[ $alpha == "next" ]]; then alpha="A"; fi


			fi

			done
		done

#                echo "[Header]" > $newmanifest
#                echo $name"  Manifest Version,"$ver >> $newmanifest
#                echo "ReferenceGenome,"$RefGen >> $newmanifest
#                echo "  " >> $newmanifest
#                echo "[Regions]" >> $newmanifest
#                echo "Name,Chromosome,Amplicon Start,Amplicon End,Upstream Probe Length,Downstream Probe Length,Comments" >> $newmanifest
#		cat $newmanifest.tmp >> $newmanifest



#		echo "Checking Amplicon Manifest for duplicates in the name column"

#		dup=`awk -F'\t' '{print $1}' $newmanifest.tmp | sort | uniq -d | grep -F -f - $newmanifest.tmp`

#			if [[ $dup != "" ]];
#				then
#				echo "DUPLICATES in AMPLICONMANIFEST"
#				echo $dup
#			fi
rm -f $p3dir/*.tmp

# dir is imported from pipeline script in the environment
htmloutpath="/home/dyap/public_html"
cp $orderleft $htmloutpath"/"$Project"/"$name"/"			
cp $orderright $htmloutpath"/"$Project"/"$name"/"			

echo "Files can be found here:"
echo $htmloutpath"/"$Project"/"$name
echo " or online at http://godel.cluster.bccrc.ca/workflow/primer3check/v3_pipeline/"$Project"/"$name

rsync -vr --progress $htmloutpath/$Project/$name dyap@godel.cluster.bccrc.ca:/var/www/html/workflow/primer3check/v3_pipeline/$Project/$name

echo "done."
exit;
