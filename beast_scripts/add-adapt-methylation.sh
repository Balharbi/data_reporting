#!/bin/sh

# This Script was written by Damian Yap (Apr 2013)
# Modified 11 Aug 2014 for DNA methylation primers

# To filter and add specific adaptors to primer3 generated primers for MiSeq
# Generate the order file and AmpliconManifest

###############################################################
fname="140808"		# Sample set naming
name=$fname"_primers_L9_MCF10A"
expt="forDamian"
type="Ill" 		# Illumina adaptors
#type="Fld" 		# Fluidigm adaptors
Project="manual"	# Project name
#RefGen="Custom\\"$name	# Reference Genome for AmpliconManifest
RefGen="C:\Illumina\MiSeq Reporter\Genomes\Homo_sapiens\UCSC\hg19\Sequence\WholeGenomeFASTA"	# Reference Genome for AmpliconManifest
ver="2"			# AmpliconManifest Version
###############################################################

dir="/home/dyap/Projects/PrimerDesign/manual"
p3dir="/home/dyap/Projects/PrimerDesign/manual"
posdir="/home/dyap/Projects/PrimerDesign/manual"

##########################################
# Selected positions should be placed here
# Generated de novo from file
sourcefile=$posdir"/selected_positions.txt"
ffile=$name"_"$expt".csv"
outfile=$name".csv"
echo "amplicon_coordinates,left_primer_sequence+left"$type"adaptor,left_primer_len-noadaptor,right_primer_sequence+left"$type"adaptor,right_primer_len-noadaptor,chromosome,start,end" > $outfile

# List the unique seq_id
cat $dir"/"$ffile | awk -F"\t" '{print $1}' > $sourcefile

# Selects only the breakpoints (unique starts)
# grep breakpoint $dir"/"$ffile | awk -F"\t" '{print $17}' > $sourcefile

clear 
cd $dir


primerfile=$dir"/"$ffile
orderleft=$p3dir"/"$name"-"$type"-leftprimers.csv"
orderright=$p3dir"/"$name"-"$type"-rightprimers.csv"

						echo "WellPosition,Name,Sequence,Notes" > $orderleft
						echo "WellPosition,Name,Sequence,Notes" > $orderright

newmanifest=$p3dir"/"$name".AmpliconManifest"

rm -fr $orderfile
rm -fr $newmanifest


	if [[ $type == "Ill" ]]
		then
		# Illlumina Adaptors (5'->3')
		fa="TCGTCGGCAGCGTCAGATGTGTATAAGAGACAG"
		ra="GTCTCGTGGGCTCGGAGATGTGTATAAGAGACAG"
	fi

	if [[ $type == "Fld" ]]
		then	
		# Forward adaptor for Fluidigm
		fa="ACACTGACGACATGGTTCTACA"
		# Reverse adaptor for Fluidigm (5'->3')
		ra="TACGGTAGCAGAGACTTGGTCT"
	fi

# If file has a header (manual input)
# cat $sourcefile | tail -n +2  > pattern
# If file has a NO header (selected using grep)
# cat $sourcefile > pattern
# IF file is generated by a script (header and formatted)
cat $sourcefile | tail -n +2 | awk -F"," '{print $1}' > pattern

# Counters
alpha="A"
count=1
plate=1
		for i in `cat pattern`

		do
		echo $i

# Check the positions of these in the input file ALWAYS!!!!

		label=`grep -m1 $i $primerfile | awk -F"," '{print $1}'`
		left0=`grep -m1 $i $primerfile | awk -F"," '{print $2}'`
		right0=`grep -m1 $i $primerfile | awk -F"," '{print $3}'`

			leftpri=`echo $left0 | wc -c`
			rightpri=`echo $right0 | wc -c`
			llen=`echo "$leftpri -1" | bc`    # wc off by one correction
			rlen=`echo "$rightpri -1" | bc`   # wc off by one correction
		
			ampstart=`echo $label | awk -F: '{print $2}' | awk -F- '{print $1}'`
			ampend=`echo $label | awk -F: '{print $2}' | awk -F- '{print $2}'`
			ampchr=`echo $label | awk -F: '{print $1}'` 


		echo $label,$left0,$llen,$right0,$rlen

				if [[ $alpha == "I" ]]; 
					then 	alpha="A"
						plate=$((plate+1))
						orderleft=$p3dir"/"$name"-Ill-leftprimers"$plate".csv"
						orderright=$p3dir"/"$name"-Ill-rightprimers"$plate".csv"

						echo "WellPosition,Name,Sequence,Notes" > $orderleft
						echo "WellPosition,Name,Sequence,Notes" > $orderright

				fi

			if [[ $left0 != "" ]];
			
				then

				if [[ $right0 != "" ]];
			
					then

						if [[ $count -lt 10 ]];
							then 
								welpos=$alpha"0"$count
							else
								welpos=$alpha$count
						fi

						echo "Adding adaptors to sequences..."
						echo $welpos","$label"_L,"$fa$left0 >> $orderleft
						echo $welpos","$label"_R,"$ra$right0 >> $orderright

						echo "Generating AmpliconManifest"
						echo $label","$ampchr","$ampstart","$ampend","$llen","$rlen >> $newmanifest.tmp

						echo $label","$fa$left0","$llen","$ra$right0","$rlen","$ampchr","$ampstart","$ampend >> $outfile
				fi
			fi

			count=$((count+1))

			if [[ $count == 13 ]];
				then 
				count="1"


				if [[ $alpha == "H" ]]; then alpha="I"; fi
				if [[ $alpha == "G" ]]; then alpha="H"; fi
				if [[ $alpha == "F" ]]; then alpha="G"; fi
				if [[ $alpha == "E" ]]; then alpha="F"; fi
				if [[ $alpha == "D" ]]; then alpha="E"; fi
				if [[ $alpha == "C" ]]; then alpha="D"; fi
				if [[ $alpha == "B" ]]; then alpha="C"; fi
				if [[ $alpha == "A" ]]; then alpha="B"; fi
				if [[ $alpha == "next" ]]; then alpha="A"; fi


			fi

		
		done

                echo "[Header]" > $newmanifest.2.tmp
                echo $name"  Manifest Version,"$ver >> $newmanifest.2.tmp
                echo "ReferenceGenome,"$RefGen >> $newmanifest.2.tmp
                echo "  " >> $newmanifest.2.tmp
                echo "[Regions]" >> $newmanifest.2.tmp
                echo "Name,Chromosome,Amplicon Start,Amplicon End,Upstream Probe Length,Downstream Probe Length,Comments" >> $newmanifest.2.tmp
		cat $newmanifest.tmp  >> $newmanifest.2.tmp

		cat $newmanifest.2.tmp  | tr ',' '\t' > $newmanifest
		


		echo "Checking Amplicon Manifest for duplicates in the name column"

		dup=`awk -F'\t' '{print $1}' $newmanifest.tmp | uniq -d`

			if [[ $dup != "" ]];
				then
				echo "DUPLICATES in AMPLICONMANIFEST"
				echo $dup
			fi
rm -f $p3dir/*.tmp
			
echo "done."
exit;
