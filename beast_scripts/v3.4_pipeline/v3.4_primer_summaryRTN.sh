#!/bin/bash
# Script to get the top hits of isPCR
# Generated from the commandline isPCR on beast
# Generate an order file for those primers - done
# Generate Manifest - done
# Generate HTML view file - done
# scp that to godel.cluster.bccrc.ca - done

# IF run as pipeline (comment this out)
Project="eIF4A3"
# Required
sample="eIF4A3_NMD"
name=$sample
# basedir
dir="/home/dyap/Projects/PrimerDesign/"$Project
reads=150

#==================================================
# Project Directory
# dir is imported from pipeline script in the environment
htmloutpath="/home/dyap/public_html"

# positions
posdir=$dir"/positions"

# primer3 output
p3dir=$dir"/primer3"

# Annotation output
annodir=$dir"/Annotate"

# Tmp file
tmp="/home/dyap/temp"

echo "Running Primer_Summary version v3.4..."

# from isPCR command line output
# fasta formatted
infilesuffix="_isPCR-output.fa"

outfilesuffix="_primer_order.txt"

# Name of the input file
inputfile=$p3dir"/"$name$infilesuffix
raw=$posdir"/"$name"_positions.txt"
designfile=$p3dir"/"$name"_p3_design.txt"
chkfile=$p3dir"/"$name"_isPCR-input"

# Name of the output file
failfile=$p3dir"/"$name"_fail_QC"
suppfile=$p3dir"/"$name"_SupplFig.csv"
orderfile=$p3dir"/"$name$outfilesuffix
manifestfile=$p3dir"/"$name".AmpliconManifest"
qcfile=$tmp"/"$name"_QC.txt"
manfile=$tmp"/"$name"_manifest"
ordfile=$tmp"/"$name"_order"
annofile=$annodir"/"$name"_Annotate.csv"
annofile2=$annodir"/"$name"_anno.txt"
annofile3=$annodir"/"$name".variant_function"
htmfile=$tmp"/"$name"_summary"
htmlfile=$annodir"/"$name"_summary.html"

# Formatting html
bold=$(tput bold)
normal=$(tput sgr0)

# Checking to see if required files exist in correct paths

rm -f $failfile"*"
rm -f $p3dir/*.tmp
rm $p3dir/set.csv

if [ -f $inputfile ]
	then
	echo "Overwriting "$inputfile". Press ENTER to continue or Ctrl-C to EXIT."
	# read ans
fi

if [ -f $raw ]
	then
	echo "Reading from file: "$raw
	else
	echo $raw": File not found. Exiting...."
	exit 1;
fi

if [ -f $ordfile ]
	then
	echo "Overwriting "$ordfile". Press ENTER to continue or Ctrl-C to EXIT."
	# read ans
fi
	echo "ID, Chr, Start, End, Amplicon Length, Left Primer, Left length, Right Primer, Right Length, Comments" > $ordfile


if [ -f $manifestfile ]
	then
	echo "Overwriting "$manifestfile". Press ENTER to continue or Ctrl-C to EXIT."
	# read ans
fi
		echo "[Header]" > $manfile
		echo $name"  Manifest Version,2" >> $manfile
		echo "ReferenceGenome,C:\Illumina\MiSeq Reporter\Genomes\Homo_sapiens\UCSC\hg19\Sequence\WholeGenomeFASTA" >> $manfile
		echo "	" >> $manfile
		echo "[Regions]" >> $manfile
		echo "Name,Chromosome,Amplicon Start,Amplicon End,Upstream Probe Length,Downstream Probe Length,Comments" >> $manfile

if [ -f $htmlfile ]
	then
	echo "Overwriting "$htmlfile". Press ENTER to continue or Ctrl-C to EXIT."
	# read ans
fi
############ PASS FILE
	echo "Amplicons for "$bold$Project$normal" Project" > $htmfile"1.tmp"
	echo "Sequences for Project: "$bold$name$normal >> $htmfile"1.tmp"
	date >> $htmfile"1.tmp"
	echo " " >> $htmfile"1.tmp"
	echo "The First row is the RT-PCR amplicon with the primers in RED" |  GREP_COLOR="1;31" grep --color=always "RED" >> $htmfile"1.tmp"
	echo "Next, are the matche(s), if any, to the genomic (DNA) of the primer pairs (highlighted in BLUE) are shown - avoid if they cannot be uniquely identified by length or sequence." | GREP_COLOR="1;34" grep --color=always "BLUE" >> $htmfile"1.tmp"
	echo "If there are more amplicons binding to matches in the transcriptome (cDNA) , then they are listed with the primers in GREEN. Check if you can discriminate by length or sequence." |  GREP_COLOR="1;32" grep --color=always "GREEN" >> $htmfile"1.tmp"
	echo " " >> $htmfile"1.tmp"

	echo "Amplicons generated by Primer3, checked by in-silico PCR on human transcriptomic and genomic data for Miseq run of "$reads >> $htmfile"1.tmp"
	echo "ID -------------------------------------------------------------------------  Annotation ----------------------------------------------------   co-ordinates (length) - remarks" >> $htmfile"1.tmp"
	echo "==========  LEFT PRIMER ======================================================================================================================= RIGHT PRIMER =====" | GREP_COLOR="1;31" grep --color=always "PRIMER"  >> $htmfile"1.tmp"

	echo " " >> $htmfile"1.tmp"
	echo " " >> $htmfile"1.tmp"


if [ -f $qcfile ]
	then
	echo "Overwriting "$qcfile". Press ENTER to continue or Ctrl-C to EXIT."
	# read ans
	rm -f $qcfile
fi
		echo "Amplicon ID,Transcript ID,Amplicon Start,Amplicon End,Left Primer,Right Primer,Amplicon Length" > $suppfile


# Read one position at a time from the position file
# Match it with the each instance from the isPCR output file

echo "Head of primer file:"
head $raw



for i in `cat $raw  | awk -F"," '{print $1}' | awk -F"${sample}_" '{print $2}' | sort -u`
	do
	echo "==============================" >> $p3dir"/test.tmp"

	echo "Unique String, i="$i

	first=1
	pairs=`grep -a "$i" $chkfile | wc -l`

		for k in  $(eval echo "{$first..$pairs}")
        	do
		# create a unique pair pair name combination 
		gene=`grep -m$k -a "$i" $chkfile | tail -n1 | awk -F" " '{print $1}' | awk -F"_" '{print $1}'`
		idtag=`grep -m$k -a "$i" $chkfile | tail -n1 | awk -F" " '{print $1}' | awk -F"_" '{print $2}'`
		lefttag=`grep -m$k -a "$i" $chkfile | tail -n1 | awk -F" " '{print $2}'`
		righttag=`grep -m$k -a "$i" $chkfile | tail -n1 | awk -F" " '{print $3}'`

               if [[ -z $lefttag ]] && [[ -z $righttag ]];
                               then
                               break
               fi

		echo "..................................." >> $p3dir"/test.tmp"

		echo $idtag,$lefttag,$righttag >> $p3dir"/test.tmp"

		count=`grep "$idtag" $inputfile | grep "$lefttag" | grep "$righttag" | wc -l`
		echo $count
		
			for l in  $(eval echo "{$first..$count}")
	               	do

			echo $l
			match=`grep -m$l "$righttag" $inputfile | grep "$lefttag" | tail -n1`
			trans=`echo $match | awk -F" " '{print $1}' | tr -d ">"`
			ENST=`echo $match | awk -F" " '{print $1}' | awk -F":" '{print $1}' | tr -d ">"`
			len=`echo $match | awk -F" " '{print $3}' | tr -d "bp"`
			echo $match

			if [[ "$idtag" == "$ENST" ]]
				then
					# This higlights the correct amplified amplicon among all the amplicons
					echo "************"$trans,$len >> $p3dir"/test.tmp"
					# This gets the correct amplicon for the required transcript
					echo $idtag,$gene,$lefttag,$righttag,$len,$trans >> $p3dir"/selected.tmp"
				else

					echo $trans,$len >> $p3dir"/test.tmp"
					
			fi

			if [[ "$count" == "1" ]]
				then
					# This is obviously the correct amplicon as there is only one match
					echo $idtag,$gene,$lefttag,$righttag,$len,$trans >> $p3dir"/unique.tmp"
					
			fi
			done
		done
	done

# Run part ii which can be run as a separate file 
# for debugging purposes

export Project=$Project
export sample=$sample
export name=$sample
export dir=$dir
export reads=$reads
/home/dyap/Scripts/v3.4_pipeline/v3.4_primer_summaryRT2.sh
			
