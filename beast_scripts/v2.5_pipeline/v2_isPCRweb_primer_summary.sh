#!/bin/sh
# Script to get the top hits of isPCR
# Generated from the web-based isPCR on MetaArray
# Generate an order file for those primers - done
# Generate Manifest - done
# Generate HTML view file - done
# scp that to godel.cluster.bccrc.ca - not done

# IF run as pipeline (comment this out)
# Project="TOV"
# type="indel"
# type="SNV2"
# Required
# name=$Project"-"$type

# Project Directory
# dir is imported from pipeline script in the environment
htmloutpath="/meta/o/oncoapop/html/beast"

# positions
posdir=$dir"/positions"

# primer3 output
p3dir=$dir"/primer3"

# Annotation output
annodir=$dir"/Annotate"

# Tmp file
tmp="/meta/o/oncoapop/temp"

# from isPCR command line output
# fasta formatted
#infilesuffix="_isPCR-output.txt"

# from isPCR automated web iterface
# already parsed
preinfilesuffix="_isPCR_chk.csv"
infilesuffix="_isPCR-output.txt"

outfilesuffix="_primer_order.txt"

# Name of the input file
inputfile=$p3dir"/"$name$infilesuffix
preinputfile=$p3dir"/"$name$preinfilesuffix
# raw=$posdir"/primerIn-TNBC-"$type"-fix-List-altRefSeq-AccountGermMut.txt"
# raw=$posdir"/primerIn-TNBC-"$type"-fix-List-AccountGermMut.txt"
raw=$posdir"/"$name"_positions.txt"
designfile=$p3dir"/"$name"_p3_design.txt"

# Name of the output file
orderfile=$p3dir"/"$name$outfilesuffix
manifestfile=$p3dir"/"$name".AmpliconManifest"
qcfile=$tmp"/"$name"_QC.txt"
manfile=$tmp"/"$name"_manifest"
ordfile=$tmp"/"$name"_order"
annofile=$annodir"/"$name"_Annotate.csv"
annofile2=$annodir"/"$name"_anno.txt"
annofile3=$annodir"/"$name".variant_function"
htmfile=$tmp"/"$name"_summary"
htmlfile=$annodir"/"$name"_summary.html"

# Checking to see if required files exist in correct paths

if [ -f $inputfile ]
	then
	echo "Overwriting "$inputfile". Press ENTER to continue or Ctrl-C to EXIT."
	# read ans
fi

if [ -f $preinputfile ]
	then
	echo "Reading from file: "$preinputfile
	cat $preinputfile | tr -d '"' > $inputfile
	else
	echo $preinputfile": File not found. Exiting...."
	exit 1;
fi

if [ -f $raw ]
	then
	echo "Reading from file: "$raw
	else
	echo $raw": File not found. Exiting...."
	exit 1;
fi

if [ -f $annofile ]
	then
	echo "Reading from file: "$annofile
	tail -n +2 $annofile | awk -F, '{print $2" "$3" "$4" "$5" "$6" "$7}' | tr -d '"' | sed 's/chr//' > $annofile2
	# Annotation of all SNV positions
	annotate="/meta/o/oncoapop/Apps/annovar/annotate_variation.pl"
	build="hg19"
	# dir of databases (trailing slash needed)
	dbdir="/meta/o/oncoapop/Apps/annovar/humandb/"

		# Annotate the all the SNV in hg19
		cd $annodir
		perl $annotate -buildver $build -outfile $name $annofile2 $dbdir
		echo "Annotation completed."
	else
	echo $annofile": File not found. Exiting...."
	exit 1;
fi

if [ -f $ordfile ]
	then
	echo "Overwriting "$ordfile". Press ENTER to continue or Ctrl-C to EXIT."
	# read ans
fi
	echo "ID, Chr, Start, End, Amplicon Length, Left Primer, Left length, Right Primer, Right Length, Comments" > $ordfile



if [ -f $manifestfile ]
	then
	echo "Overwriting "$manifestfile". Press ENTER to continue or Ctrl-C to EXIT."
	# read ans
fi
		echo "[Header]" > $manfile					
		echo $name"  Manifest Version,1" >> $manfile				
		echo "ReferenceGenome,C:\Illumina\MiSeq Reporter\Genomes\Homo_sapiens\UCSC\hg19\Sequence\WholeGenomeFASTA" >> $manfile
		echo "	" >> $manfile
		echo "[Regions]" >> $manfile					
		echo "Name,Chromosome,Amplicon Start,Amplicon End,Upstream Probe Length,Downstream Probe Length,Comments" >> $manfile

if [ -f $htmlfile ]
	then
	echo "Overwriting "$htmlfile". Press ENTER to continue or Ctrl-C to EXIT."
	# read ans
fi
	q='"'
	echo "Amplicons for "$Project" Project" > $htmfile"1.tmp"
	echo "Sequences for Project: "$sample"-"$name >> $htmfile"1.tmp"
	date >> $htmfile"1.tmp"
	echo " " >> $htmfile"1.tmp"
	
	echo "Amplicons generated by Primer3, checked by in-silico PCR, QC'ed for Miseq run of "$reads >> $htmfile"1.tmp"
	echo "ID ---------------------------------------------------------------  ANNOVAR annotation ----------------------------------------------------   UCSC coordinates (SNV)" >> $htmfile"1.tmp"
	echo "==========  LEFT PRIMER =========================================== context of SNV (red) ==================================================== RIGHT PRIMER ====="  >> $htmfile"1.tmp"

	echo " " >> $htmfile"1.tmp"
	echo " " >> $htmfile"1.tmp"
	


if [ -f $qcfile ]
	then
	echo "Overwriting "$qcfile". Press ENTER to continue or Ctrl-C to EXIT."
	# read ans
	rm -f $qcfile
fi

# Read one position at a time from the position file
# Match it with the first instance from the isPCR output file
# If conditions are good, accept it or else take the next best position

# This is the first primer pair
# IF fails, n=2 for the next primer pair
failed=0
echo "RAW="
cat $raw

for i in `cat $raw  | awk -F"," '{print $3}' | sort -u`
	do
	echo "i="$i
		# QC to test if grep is successful
		test=`grep $i $inputfile | wc -l`
		echo $test
		if [ $test -eq 0 ]
			then 
			echo "Pattern not found"
			failed=`echo "$failed + 1" | bc`
			continue
		fi
		if [ $test -gt 5 ]
			then 
			echo "Possible non-specific amplicon"
			grep $i $inputfile
		fi

	
	ampchr=`grep -m1 $i $inputfile | awk -F"," '{print $4}' | sed 's/chr//'`
	ampstart=`grep -m1 $i $inputfile | awk -F"," '{print $5}'`
	ampend=`grep -m1 $i $inputfile | awk -F"," '{print $6}'`

	myid=`grep -m1 $i $inputfile | awk -F"," '{print $2}'`
	amplen=`grep -m1 $i $inputfile | awk -F"," '{print $7}'`
	leftpri=`grep -m1 $i $inputfile | awk -F"," '{print $8}'`
	rightpri=`grep -m1 $i $inputfile | awk -F"," '{print $9}'`
	
	chr=`echo $myid | awk -F"_" '{print $1}' | sed 's/chr//'`
	pos=`echo $myid | awk -F"_" '{print $2}'`

	ann=`grep -m1 $i $annofile3 | awk -F"\t" '{print $1}'`
	gene=`grep -m1 $i $annofile3 | awk -F"\t" '{print $2}'`
	snv=`grep -m1 $i $annofile3 | awk -F" " '{print $6}'`

	snvchk=`grep -m1 $i $designfile | awk -F"," '{print $6}' | tr -d '"'`
	idchk=`grep -m1 $i $designfile | awk -F"," '{print $2}' | tr -d '"'`
	cxt=`grep -m1 $i $designfile | awk -F"," '{print $7}' | tr -d '"' | tr "A-Z" "a-z"`
echo $cxt
	ampseq=`grep -m1 $i $inputfile | awk -F"," '{print $10}' | tr -d '"' | grep --color=always $cxt`
echo "==================================="
echo $ampseq

# QC for MiSeq run (specific to input)
# Exported from the $Miseq
#	reads=150
# assume width=20

echo "+++++++++++++++++++++++++++++++"
echo "inputfile="$inputfile
echo "ampstart="$ampstart
echo "reads="$reads

	llim=`echo "$ampstart + $reads - 10 " | bc`
	rlim=`echo "$ampend - $reads + 10 " | bc`

echo $llim"+++++++++++++++"$rlim
echo $chr"+++++++++++++++"$ampchr

 
	if [[ $chr == $ampchr ]] && [[ $llim > $pos ]] && [[ $rlim < $pos ]];
		then
		echo "PASS!"
		Miseq="PASS"
		else
			for n in 2 3 4 5
			do

			ampchr=`grep -m$n $i $inputfile | tail -n1 | awk -F"," '{print $4}' | sed 's/chr//'`
			ampstart=`grep -m$n $i $inputfile | tail -n1 | awk -F"," '{print $5}'`
			ampend=`grep -m$n $i $inputfile | tail -n1  | awk -F"," '{print $6}'`

			myid=`grep -m$n $i $inputfile | tail -n1 | awk -F"," '{print $2}'`
			amplen=`grep -m$n $i $inputfile | tail -n1 | awk -F"," '{print $7}'`
			leftpri=`grep -m$n $i $inputfile | tail -n1 | awk -F"," '{print $8}'`
			rightpri=`grep -m$n $i $inputfile | tail -n1 | awk -F"," '{print $9}'`

			ampseq=`grep -m$n $i $inputfile | tail -n1 | awk -F"," '{print $10}' | grep --color=always $cxt`
 
			if [[ $chr == $ampchr ]] && [[ $llim > $pos ]] && [[ $rlim < $pos ]];
				then
				Miseq="PASS-"$n
				break
				else
				Miseq="FAIL-"$n
				failed=`echo "$failed + 1" | bc`
			fi
			done
				
	fi
 
	echo -e $myid"\t"$ampchr"\t"$ampstart"\t"$ampend"\t"$amplen"\t QC: "$reads"bp: "$Miseq >> $qcfile

	if [[ $Miseq =~ "PASS" ]]
		then
		# Generate manifest file of all that pass

		llen=`echo $leftpri | wc -c`
		leftlen=`echo "$llen - 1" | bc` 
		rlen=`echo $rightpri | wc -c` 
		rightlen=`echo "$rlen - 1" | bc` 
		echo $myid,"chr"$ampchr,$ampstart,$ampend,$leftlen,$rightlen,$ann"-"$gene"-"$amplen"bp-"$idchk >> $manfile

		# Generate order file of all that pass
		echo $myid,"chr"$ampchr,$ampstart,$ampend,$amplen" bp",$leftpri,$leftlen,$rightpri,$rightlen,$ann,$gene,$idchk >> $ordfile
		trampseq=`echo $ampseq | tr "a-zA-Z" "A-Za-z"`
		echo $myid" ----------------------------------------------------   "$ann"-"$gene"   -----------------------------------------------    "$ampchr":"$ampstart"-"$ampend" ("$snv")" >> $htmfile"1.tmp"
		echo  $ampseq >> $htmfile"1.tmp"	
		echo "----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" >> $htmfile"1.tmp"
		echo  "  " >> $htmfile"1.tmp"	
		echo  "  " >> $htmfile"1.tmp"	
  	
	fi

	done
echo "DONE."
echo "#####"

cp $ordfile $orderfile
echo "Order file generated: " $orderfile

cat $manfile | tr "," "\t" > $manifestfile
echo "Manifest File generated: " $manifestfile

cat $htmfile"1.tmp" | ~/Apps/aha/aha  > $htmlfile

echo "Amplicon Check File generated: " $htmlfile
mkdir $htmloutpath"/"$Project
mkdir $htmloutpath"/"$Project"/"$sample
cp $htmlfile $htmloutpath"/"$Project"/"$sample"/"$name"_summary.html"
cp $orderfile $htmloutpath/$Project"/"$sample"/"$name"_primer_order.txt"
cp $manifestfile $htmloutpath/$Project"/"$sample"/"$name".AmpliconManifest.txt"

echo "Number that failed and iterated:"
echo $failed

echo "Files can be found here:"
echo $htmloutpath"/"$Project"/"$name

exit;


