#!/bin/sh

# This Script was written by Damian Yap (Apr 2013)
# Modified May 2016 for test Xeno evol drug by Farhia

# To filter and add specific adaptors to primer3 generated primers for MiSeq
# This list of primers were manually selected by eye
# Generate the order file and filtered AmpliconManifest

## TODO
# Need to check for oligos are < 60 nt and filter out

# NOTE: For ordering (as per SOP)
# 500 pmol DNA plate oligo scale wet in IDTE pH 7.5 (250 ul, 2uM conc)
# V-bottom plates, wet (on dry ice)
# estimate about $420 per oligo plate at IDT

###############################################################
#fname="SA532"	# Sample set naming 14 Oct 2016
fname="SA535"	# Sample set naming 14 Oct 2016
name="xenodrug."$fname
expt="1"
type="Ill" 		# Illumina adaptors
#type="Fld" 		# Fluidigm adaptors
Project="Xenodrug"	# Project name
RefGen="C:\Illumina\MiSeq Reporter\Genomes\Homo_sapiens\UCSC\hg19\Sequence\WholeGenomeFASTA"
	# Reference Genome for AmpliconManifest
ver="2"			# AmpliconManifest Version
###############################################################

posdir="/home/dyap/Projects/Tumour_Evol"
sourcedir="/home/dyap/Projects/PrimerDesign/Tumour_Xenograft_Rev/primer3"
dir=$sourcedir
p3dir=$sourcedir
subdir=$Project
outdir=$posdir/$Project/$fname

##########################################
# Selected positions should be placed here
posfile=$outdir"/"$fname".txt"
sourcefile=$sourcedir"/"$fname".tsv"
	
primerfile=$outdir"/"$name"_primer_order.txt"
orderfile=$outdir"/"$name"_primer_order.csv"

oldmanifest=$outdir"/"$name".AmpliconManifest.txt"
newmanifest=$outdir"/"$name"-filtered.AmpliconManifest"

oldSupplfile=$outdir"/"$name"_SuppleFigFile.csv"
newSupplfile=$outdir"/"$name"_primers_Suppl.csv"

rm -fr $orderfile
rm -fr $newmanifest
rm -fr $newSupplfile

# prepare files
cat $sourcedir"/"$fname".AmpliconManifest" > $oldmanifest
cat $sourcedir"/"$fname"_primer_order.txt" > $primerfile
cat $sourcedir"/"$fname"_SupplFig.csv" > $oldSupplfile

# Convert positions to standard format
awk -v var="$fname" -F" " '{print var"_chr"$1}' $posfile > $sourcefile

#########################################
# Primer name format
# study_xenodrug_1_SA532
setname=$Project"_"$expt"_"$fname
#########################################

#clear 
cd $dir


orderleft=$outdir"/"$setname"-"$type"-leftprimers.csv"
orderright=$outdir"/"$setname"-"$type"-rightprimers.csv"

						echo "WellPosition,Name,Sequence,Notes" > $orderleft
						echo "WellPosition,Name,Sequence,Notes" > $orderright




	if [[ $type == "Ill" ]]
		then
		# Illlumina Adaptors (5'->3')
		fa="TCGTCGGCAGCGTCAGATGTGTATAAGAGACAG"
		ra="GTCTCGTGGGCTCGGAGATGTGTATAAGAGACAG"
	fi

	if [[ $type == "Fld" ]]
		then	
		# Forward adaptor for Fluidigm
		fa="ACACTGACGACATGGTTCTACA"
		# Reverse adaptor for Fluidigm (5'->3')
		ra="TACGGTAGCAGAGACTTGGTCT"
	fi

# If file has a header (manual input)
cat $sourcefile | tail -n +2  > pattern
# If file has a NO header (selected using grep)
# cat $sourcefile > pattern
# IF file is generated by a script (header and formatted)
# cat $sourcefile | tail -n +2 | awk -F" " '{print $1}' > pattern

# Counters
alpha="A"
count=1
plate=1
		for i in `cat pattern`

		do
		echo $i

# Check the positions of these in the input file ALWAYS!!!!

		label=`grep -m1 $i $primerfile | awk -F"," '{print $1}'`
		left0=`grep -m1 $i $primerfile | awk -F"," '{print $6}'`
		right0=`grep -m1 $i $primerfile | awk -F"," '{print $8}'`

		grep -m1 $i $oldSupplfile >> $newSupplfile
		echo $label,$left0,$right0

				if [[ $alpha == "I" ]]; 
					then 	alpha="A"
						plate=$((plate+1))
						orderleft=$outdir"/"$setname"-L"$plate".csv"
						orderright=$outdir"/"$setname"-R"$plate".csv"

						echo "WellPosition,Name,Sequence,Notes" > $orderleft
						echo "WellPosition,Name,Sequence,Notes" > $orderright

				fi

			if [[ $left0 != "" ]];
			
				then

				if [[ $right0 != "" ]];
			
					then

						if [[ $count -lt 10 ]];
							then 
								welpos=$alpha"0"$count
							else
								welpos=$alpha$count
						fi

						echo "Adding adaptors to sequences..."
						echo $welpos","$label"_L,"$fa$left0 >> $orderleft
						echo $welpos","$label"_R,"$ra$right0 >> $orderright

						echo "Filtering AmpliconManifest"
						ampmatch=`echo $i | awk -F"_" '{print $2"_"$3}'`
						grep $ampmatch -m1 $oldmanifest | awk -F"\t" '{print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6}'  >> $newmanifest.tmp

				fi
			fi

			count=$((count+1))

			if [[ $count == 13 ]];
				then 
				count="1"


				if [[ $alpha == "H" ]]; then alpha="I"; fi
				if [[ $alpha == "G" ]]; then alpha="H"; fi
				if [[ $alpha == "F" ]]; then alpha="G"; fi
				if [[ $alpha == "E" ]]; then alpha="F"; fi
				if [[ $alpha == "D" ]]; then alpha="E"; fi
				if [[ $alpha == "C" ]]; then alpha="D"; fi
				if [[ $alpha == "B" ]]; then alpha="C"; fi
				if [[ $alpha == "A" ]]; then alpha="B"; fi
				if [[ $alpha == "next" ]]; then alpha="A"; fi


			fi

		
		done

                echo "[Header]" > $newmanifest
                echo $name" Manifest Version,"$ver >> $newmanifest
                echo "ReferenceGenome,"$RefGen >> $newmanifest
                echo "  " >> $newmanifest
                echo "[Regions]" >> $newmanifest
                echo "Name,Chromosome,Amplicon Start,Amplicon End,Upstream Probe Length,Downstream Probe Length,Comments" >> $newmanifest
		cat $newmanifest.tmp >> $newmanifest
		cat $newmanifest | tr ',' '\t' |  awk 'sub("$", "\r")' >> $newmanifest.txt



		echo "Checking Amplicon Manifest for duplicates in the name column"

		dup=`cat $newmanifest | awk -F'\t' '{print $1,"\n"}' | sort | uniq -d`

			if [[ $dup != "" ]];
				then
				echo "DUPLICATES in AMPLICONMANIFEST"
				echo $dup
			fi


rm -f $primerfile
rm -f $oldmanifest
rm -f $oldSupplfile
rm -f $outdir/*.tmp
rm -f $dir/*.tmp
rm -f $sourcefile
rm -f pattern
			
echo "done."
exit;
